// backend/src/gameManager.ts
import { GameState } from './gameState';
import { Player } from './player';
import {
    GameId, PlayerId, CardValue,
    GameStateUpdateMessage, ServerMessageType,
    GameCreatedMessage, GameDeletedMessage,
    PlayerJoinedMessage, PlayerLeftMessage,
    CardPlayedValidationMessage
} from './types';
import { ServerWebSocket } from 'bun'; // Import Bun's WebSocket type

type PlayerSocket = ServerWebSocket;

// Store WebSocket connections: Map<gameId, Map<playerId, WebSocket>>
type ActiveConnections = Map<GameId, Map<PlayerId, PlayerSocket>>;

// GameManager ‡πÄ‡∏õ‡πá‡∏ô Singleton ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡πÄ‡∏Å‡∏°
class GameManager {
    private activeGames: Map<GameId, GameState> = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á active
    private activeWsConnections: ActiveConnections = new Map(); // ‡πÄ‡∏Å‡πá‡∏ö WebSocket connections ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Å‡∏°

    // Map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö WebSocket ‡∏Ç‡∏≠‡∏á client ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Lobby (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏•‡∏ö)
    private lobbyClients: Map<PlayerId, PlayerSocket> = new Map(); // Key: clientId

    private static instance: GameManager; // Singleton instance

    // Singleton pattern: ‡πÑ‡∏î‡πâ instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ç‡∏≠‡∏á GameManager
    public static getInstance(): GameManager {
        if (!GameManager.instance) {
            GameManager.instance = new GameManager();
        }
        return GameManager.instance;
    }

    // --- Game Creation & Management (HTTP-triggered usually) ---

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
    createGame(hostId: PlayerId, hostName: string, gameName: string, maxPlayers: number = 4): GameState {
        const gameId: GameId = crypto.randomUUID(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á Game ID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        const newGame = new GameState(gameId, gameName, hostId, maxPlayers);

        const hostPlayer = new Player(hostId, hostName);
        newGame.addPlayer(hostPlayer); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Æ‡∏™‡∏ï‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

        this.activeGames.set(gameId, newGame);
        console.log(`Game created: ${gameId} by ${hostName}`);

        // ‡πÅ‡∏à‡πâ‡∏á Lobby Clients ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        this.broadcastLobbyUpdate({
            type: ServerMessageType.GAME_CREATED,
            game: newGame
        });

        return newGame;
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°
    getGame(gameId: GameId): GameState | undefined {
        return this.activeGames.get(gameId);
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏î‡πâ (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Lobby ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏ï‡πá‡∏°)
    getAllGames(): GameState[] {
        return Array.from(this.activeGames.values()).filter(game =>
            game.roundState === 'Lobby' && game.players.length < game.maxPlayers
        );
    }

    // ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏Å‡∏°
    joinGame(gameId: GameId, playerId: PlayerId, playerName: string): GameState | null {
        console.log(`[GameManager.joinGame DEBUG] üü•üü•üü• Player ${playerName} (${playerId}) is CALLING joinGame for game ${gameId} üü•üü•üü•`); // **‡πÄ‡∏û‡∏¥‡πà‡∏° LOG ‡∏ô‡∏µ‡πâ**
    
        const game = this.activeGames.get(gameId);
        if (!game) {
            console.warn(`[GameManager.joinGame DEBUG] Game ${gameId} not found in activeGames map. Returning null.`);
            return null;
        }
    
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° Log ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
        console.log(`[GameManager.joinGame DEBUG] Game ${gameId} current roundState: ${game.roundState}, players count: ${game.players.length}/${game.maxPlayers}`);
        if (game.roundState !== 'Lobby') {
            console.warn(`[GameManager.joinGame DEBUG] Game ${gameId} is not in Lobby state (${game.roundState}). Cannot join.`);
            return null;
        }
        if (game.players.length >= game.maxPlayers) {
            console.warn(`[GameManager.joinGame DEBUG] Game ${gameId} is full (${game.players.length}/${game.maxPlayers}). Cannot join.`);
            return null;
        }
    
        const newPlayer = new Player(playerId, playerName);
        const playerAdded = game.addPlayer(newPlayer); // <--- ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GameState.addPlayer
    
        console.log(`[GameManager.joinGame DEBUG] Result of game.addPlayer(${newPlayer.id}) for game ${gameId}: ${playerAdded}`); // **‡πÄ‡∏û‡∏¥‡πà‡∏° LOG ‡∏ô‡∏µ‡πâ**
    
        if (playerAdded) {
            console.log(`[GameManager.joinGame DEBUG] Player ${playerName} (${playerId}) successfully added (via HTTP join) to game ${gameId}. Broadcasting state.`);
            // ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ `game` ‡∏Ñ‡∏∑‡∏≠ GameState instance ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
            this.broadcastGameState(gameId, game);
            this.broadcastLobbyUpdate({
                type: ServerMessageType.PLAYER_JOINED,
                gameId: gameId,
                player: newPlayer
            });
            return game;
        } else {
            console.warn(`[GameManager.joinGame DEBUG] Player ${playerName} (${playerId}) could NOT be added to game ${gameId} by GameState.addPlayer. Returning null.`);
            return null;
        }
    }

    // ‡∏•‡∏ö‡πÄ‡∏Å‡∏° (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà)
    removeGame(gameId: GameId): boolean {
        const deleted = this.activeGames.delete(gameId);
        if (deleted) {
            console.log(`Game ${gameId} deleted.`);
            this.activeWsConnections.delete(gameId); // ‡∏•‡∏ö WebSocket connections ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ
            this.broadcastLobbyUpdate({ // ‡πÅ‡∏à‡πâ‡∏á Lobby Clients ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
                type: ServerMessageType.GAME_DELETED,
                gameId: gameId
            });
        }
        return deleted;
    }

    // --- Game Logic Actions (WebSocket-triggered usually) ---

    // ‡πÇ‡∏Æ‡∏™‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
    startGame(gameId: GameId): boolean {
        const game = this.activeGames.get(gameId);
        if (game && game.roundState === 'Lobby') {
            try {
                game.startGame(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Logic ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å GameState
                this.broadcastGameState(gameId, game); // Broadcast ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
                // ‡πÅ‡∏à‡πâ‡∏á Lobby ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
                this.broadcastLobbyUpdate({
                    type: ServerMessageType.GAME_STATE_UPDATE,
                    payload: game
                });
                return true;
            } catch (e: any) {
                console.error(`Failed to start game ${gameId}:`, e.message);
                // ‡∏™‡πà‡∏á Error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Host ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                this.sendToPlayer(game.hostId, gameId, { type: ServerMessageType.ERROR, message: e.message });
                return false;
            }
        }
        return false;
    }

    // ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏•‡∏á‡πÑ‡∏û‡πà
    playCard(gameId: GameId, playerId: PlayerId, cardValue: CardValue): void {
        const game = this.activeGames.get(gameId);
        if (!game) {
            this.sendToPlayer(playerId, gameId, { type: ServerMessageType.ERROR, message: 'Game not found.' });
            return;
        }

        const playResult = game.playCard(playerId, cardValue); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Logic ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÑ‡∏û‡πà‡∏à‡∏≤‡∏Å GameState

        // ‡∏´‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÑ‡∏û‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏û‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏≤‡πÄ‡∏•‡πà‡∏ô) ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
        if (!playResult.success || playResult.livesLost > 0) {
             // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏°
            const validationMessage: CardPlayedValidationMessage = {
                type: ServerMessageType.CARD_PLAYED_VALIDATION,
                playerId: playerId,
                cardValue: cardValue,
                isCorrectPlay: playResult.livesLost === 0, // true ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
                livesLost: playResult.livesLost,
                message: playResult.message
            };
            this.broadcastToGame(gameId, validationMessage);
        }

        // Broadcast ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏•‡∏á, ‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠)
        this.broadcastGameState(gameId, game);

        // ‡∏´‡∏≤‡∏Å‡∏à‡∏ö‡∏£‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏ö‡πÄ‡∏Å‡∏° ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á Lobby ‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°)
        if (game.roundState === 'RoundEnd' || game.roundState === 'GameEnd') {
             this.broadcastLobbyUpdate({
                type: ServerMessageType.GAME_STATE_UPDATE,
                payload: game
            });
        }
    }

    // ‡πÇ‡∏Æ‡∏™‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
    triggerNextRound(gameId: GameId) {
        const game = this.activeGames.get(gameId);
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ RoundEnd, ‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠, ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 3 ‡∏£‡∏≠‡∏ö
        if (game && game.roundState === 'RoundEnd' && game.teamLivesRemaining > 0 && game.currentRound < 3) {
            game.startNewRound(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
            this.broadcastGameState(gameId, game); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
        } else if (game && game.roundState === 'RoundEnd' && (game.teamLivesRemaining <= 0 || game.currentRound >= 3)) {
            // ‡∏ñ‡πâ‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß (‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà RoundEnd)
            game.roundState = 'GameEnd'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô GameEnd
            this.broadcastGameState(gameId, game);
        } else {
            console.warn(`Cannot trigger next round for game ${gameId}. Current state: ${game?.roundState}, Lives: ${game?.teamLivesRemaining}, Round: ${game?.currentRound}`);
            // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á Error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Host ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            if (game?.hostId) {
                this.sendToPlayer(game.hostId, gameId, { type: ServerMessageType.ERROR, message: 'Cannot start next round under current conditions.' });
            }
        }
    }

    // --- WebSocket Management ---

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô WebSocket ‡∏Ç‡∏≠‡∏á client ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Lobby
    registerLobbyClient(clientId: PlayerId, ws: PlayerSocket) {
        this.lobbyClients.set(clientId, ws);
        console.log(`Lobby client ${clientId} registered.`);
        this.sendToPlayer(clientId, "lobby-context", { // Use "lobby-context" as GameId‡∏à‡∏≥‡∏•‡∏≠‡∏á
            type: ServerMessageType.LOBBY_GAME_LIST_UPDATE, // Use the new type here
            payload: this.getAllGames() // Send the array of games
        });
    }

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô WebSocket ‡∏Ç‡∏≠‡∏á client ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Lobby
    unregisterLobbyClient(clientId: PlayerId) {
        this.lobbyClients.delete(clientId);
        console.log(`Lobby client ${clientId} unregistered.`);
    }

    // Broadcast ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Lobby ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Lobby Clients ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    broadcastLobbyUpdate(message: GameCreatedMessage | GameDeletedMessage | PlayerJoinedMessage | PlayerLeftMessage | GameStateUpdateMessage) {
        const messageString = JSON.stringify(message);
        this.lobbyClients.forEach((ws, clientId) => {
            if (ws.readyState === WebSocket.OPEN) {
                ws.send(messageString);
            } else {
                console.warn(`Lobby client ${clientId} WS not open. Removing.`);
                this.lobbyClients.delete(clientId);
            }
        });
    }

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô WebSocket ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏°
    registerWebSocket(playerId: PlayerId, gameId: GameId, ws: PlayerSocket) {
        if (!this.activeWsConnections.has(gameId)) {
            this.activeWsConnections.set(gameId, new Map());
        }
        this.activeWsConnections.get(gameId)?.set(playerId, ws);
        console.log(`Player ${playerId} registered WS for game ${gameId}`);
    }

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô WebSocket ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    unregisterWebSocket(playerId: PlayerId, gameId: GameId) {
        const gameConnections = this.activeWsConnections.get(gameId);
        if (gameConnections) {
            gameConnections.delete(playerId); // ‡∏•‡∏ö WebSocket ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô
            console.log(`Player ${playerId} unregistered WS from game ${gameId}`);

            const game = this.activeGames.get(gameId);
            if (game) {
                game.removePlayer(playerId); // ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°
                this.broadcastGameState(gameId, game); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠

                // ‡πÅ‡∏à‡πâ‡∏á Lobby ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á
                this.broadcastLobbyUpdate({
                    type: ServerMessageType.PLAYER_LEFT,
                    gameId: gameId,
                    playerId: playerId
                });

                // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏¥‡πâ‡∏á
                if (game.players.length === 0) {
                    this.removeGame(gameId); // ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ô‡∏µ‡πâ‡∏à‡∏∞ broadcastLobbyUpdate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏Å‡∏°
                }
            }
        }
    }

    // Broadcast ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡∏ô‡∏±‡πâ‡∏ô‡πÜ
    broadcastGameState(gameId: GameId, gameState: GameState) {
        const gameConnections = this.activeWsConnections.get(gameId);
        if (gameConnections) {
            const message: GameStateUpdateMessage = {
                type: ServerMessageType.GAME_STATE_UPDATE,
                payload: gameState
            };
            const messageString = JSON.stringify(message);

            gameConnections.forEach((ws, playerId) => {
                // FIX: Use WebSocket.OPEN instead of ws.OPEN
                if (ws.readyState === WebSocket.OPEN) {
                    ws.send(messageString);
                } else {
                    console.warn(`WS for player ${playerId} in game ${gameId} not open. Removing.`);
                    gameConnections.delete(playerId); // ‡∏•‡∏ö connection ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢
                }
            });
        }
    }

    // Broadcast ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏î‡πÜ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡∏ô‡∏±‡πâ‡∏ô‡πÜ
    broadcastToGame(gameId: GameId, message: any) {
        const gameConnections = this.activeWsConnections.get(gameId);
        if (gameConnections) {
            const messageString = JSON.stringify(message);
            gameConnections.forEach((ws, playerId) => {
                // FIX: Use WebSocket.OPEN instead of ws.OPEN
                if (ws.readyState === WebSocket.OPEN) {
                    ws.send(messageString);
                } else {
                    console.warn(`WS for player ${playerId} in game ${gameId} not open. Removing.`);
                    gameConnections.delete(playerId);
                }
            });
        }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á WebSocket ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏ô‡πÉ‡∏î‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á
    sendToPlayer(playerId: PlayerId, gameId: GameId, message: any) {
        const gameConnections = this.activeWsConnections.get(gameId);
        if (gameConnections) {
            const ws = gameConnections.get(playerId);
            // FIX: Use WebSocket.OPEN instead of ws.OPEN
            if (ws && ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify(message));
            } else {
                console.warn(`Cannot send message to player ${playerId}: WS not open or game not found.`);
            }
        }
    }
    changeGameTopic(gameId: GameId, playerId: PlayerId, topic: string): boolean {
        const game = this.activeGames.get(gameId);
        if (!game || game.hostId !== playerId) {
            console.warn(`Player ${playerId} is not host of game ${gameId} or game not found. Cannot change topic.`);
            return false;
        }

        if (game.roundState !== 'Lobby') { // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô Lobby
            console.warn(`Cannot change topic while game ${gameId} is in state: ${game.roundState}.`);
            return false;
        }

        if (game.setTopic(topic)) {
            console.log(`Game ${gameId} topic changed to: ${topic}`);
            this.broadcastGameState(gameId, game); // Broadcast ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            return true;
        }
        console.warn(`Failed to set topic ${topic} for game ${gameId}. Topic not found or invalid.`);
        return false;
    }
}

export const gameManager = GameManager.getInstance(); // Export instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß